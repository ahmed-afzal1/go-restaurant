basePath: /api/v1
definitions:
  requests.CategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  requests.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  requests.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      password_confirmation:
        type: string
      phone:
        type: string
    required:
    - email
    - password
    type: object
  requests.SubcategoryRequest:
    properties:
      category_id:
        type: string
      name:
        type: string
    required:
    - category_id
    - name
    type: object
host: localhost:8080
info:
  contact:
    name: API Support Team
  description: A comprehensive API for managing restaurant data.
  license:
    name: MIT
  title: Restaurant Management API
  version: "1.0"
paths:
  /admin/category/edit/{id}:
    get:
      description: Return a category after store
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'data: loginUser'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request'
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: Category store
      tags:
      - Category
  /admin/category/index:
    get:
      description: Returns the lists of category
      produces:
      - application/json
      responses:
        "200":
          description: 'data: categories'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: unauthorized'
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: Get categories
      tags:
      - Category
  /admin/category/store:
    post:
      description: Return a category after store
      parameters:
      - description: Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/requests.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'data: loginUser'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request'
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: Category store
      tags:
      - Category
  /admin/details:
    get:
      description: Returns the details of the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: 'data: user details'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: unauthorized'
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: Get admin details
      tags:
      - Admin
  /admin/sub-category/delete/{id}:
    delete:
      description: Delete SubCategory
      parameters:
      - description: SubCategory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'data: SubCategory'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request'
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: Delete SubCategory
      tags:
      - SubCategory
  /admin/sub-category/edit/{id}:
    get:
      description: Return a category after store
      parameters:
      - description: SubCategory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'data: SubCategory'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request'
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: Get SubCategory
      tags:
      - SubCategory
  /admin/sub-category/index:
    get:
      description: Returns the lists of subcategory
      produces:
      - application/json
      responses:
        "200":
          description: 'data: subcategories'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: unauthorized'
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: Get subcategories
      tags:
      - SubCategory
  /admin/sub-category/store:
    post:
      description: Returns the lists of subcategory
      parameters:
      - description: SubCategory Request
        in: body
        name: subcategory
        required: true
        schema:
          $ref: '#/definitions/requests.SubcategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'data: subcategories'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: unauthorized'
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: Get subcategories
      tags:
      - SubCategory
  /admin/sub-category/update/{id}:
    patch:
      description: Update the subcategory
      parameters:
      - description: SubCategory Request
        in: body
        name: subcategory
        required: true
        schema:
          $ref: '#/definitions/requests.SubcategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'data: subcategories'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: unauthorized'
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: Update subcategory
      tags:
      - SubCategory
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user with email and password.
      parameters:
      - description: Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'data: loginUser'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request'
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email, phone, and password.
      parameters:
      - description: Register Request
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: 'data: savedUser'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'errors: validationErrors'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Authentication
schemes:
- http
- https
securityDefinitions:
  JWT:
    description: JWT security accessToken. Please add it in the format "Bearer {AccessToken}"
      to authorize your requests.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
